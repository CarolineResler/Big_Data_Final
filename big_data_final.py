# -*- coding: utf-8 -*-
"""Big Data Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HPNWhJtkrXrjpDnQNId_AVVltGHiPYSM

**README:**

Must first download the dataset provided in this link https://www.kaggle.com/manoelribeiro/hateful-users-on-twitter. Move it to XSEDE Bridges, keeping the same file name. Also copy the following code as UserData.py and TwitterHate.py to the same directory.

On Bridges, **interact** and run **module load spark**.

Start the job using **spark-submit TwitterHate.py** from the same directory. You may use the argument **> Results.txt** to capture the results in a file.

Shortest execution time found to be about 27 seconds.

UserData.py
"""

class UserData:
    def __init__(self, user_id, hate, hate_neigh, normal_neigh, statuses_count, followers_count, followees_count, favorites_count, \
        listed_count, betweenness, eigenvector, in_degree, out_degree, negotiate_empath, vehicle_empath, science_empath, \
        timidity_empath, gain_empath, swearing_terms_empath, office_empath, tourism_empath, computer_empath, violence_empath, \
        horror_empath, dispute_empath, sadness_empath, internet_empath, college_empath, attractive_empath, plant_empath, technology_empath, \
        reading_empath, deception_empath, ancient_empath, ship_empath, messaging_empath, surprise_empath, occupation_empath, hearing_empath, \
        furniture_empath, restaurant_empath, domestic_work_empath, art_empath, pet_empath, air_travel_empath, dance_empath, healing_empath, \
        smell_empath, sympathy_empath, anger_empath, neglect_empath, farming_empath, clothing_empath, wedding_empath, envy_empath, speaking_empath, \
        fight_empath, payment_empath, toy_empath, giving_empath, alcohol_empath, affection_empath, friends_empath, legend_empath, suffering_empath, \
        programming_empath, military_empath, party_empath, beauty_empath, white_collar_job_empath, animal_empath, philosophy_empath, meeting_empath, \
        aggression_empath, fabric_empath, terrorism_empath, swimming_empath, shame_empath, confusion_empath, contentment_empath, night_empath, \
        ridicule_empath, nervousness_empath, health_empath, economics_empath, zest_empath, order_empath, medical_emergency_empath, feminine_empath, \
        sports_empath, car_empath, sexual_empath, masculine_empath, youth_empath, trust_empath, achievement_empath, medieval_empath, journalism_empath, \
        cleaning_empath, leisure_empath):
        self.user_id = user_id
        self.hate = hate
        self.hate_neigh = hate_neigh
        self.normal_neigh = normal_neigh
        self.statuses_count = statuses_count
        self.followers_count = followers_count
        self.followees_count = followees_count
        self.favorites_count = favorites_count
        self.listed_count = listed_count
        self.betweenness = betweenness
        self.eigenvector = eigenvector
        self.in_degree = in_degree
        self.out_degree = out_degree
        self.negotiate_empath = negotiate_empath
        self.vehicle_empath = vehicle_empath
        self.science_empath = science_empath
        self.timidity_empath = timidity_empath
        self.gain_empath = gain_empath
        self.swearing_terms_empath = swearing_terms_empath
        self.office_empath = office_empath
        self.tourism_empath = tourism_empath
        self.computer_empath = computer_empath
        self.violence_empath = violence_empath
        self.horror_empath = horror_empath
        self.dispute_empath = dispute_empath
        self.sadness_empath = sadness_empath
        self.internet_empath = internet_empath
        self.college_empath = college_empath
        self.attractive_empath = attractive_empath
        self.plant_empath = plant_empath
        self.technology_empath = technology_empath
        self.reading_empath = reading_empath
        self.deception_empath = deception_empath
        self.ancient_empath = ancient_empath
        self.ship_empath = ship_empath
        self.messaging_empath = messaging_empath
        self.surprise_empath = surprise_empath
        self.occupation_empath = occupation_empath
        self.hearing_empath = hearing_empath
        self.furniture_empath = furniture_empath
        self.restaurant_empath = restaurant_empath
        self.domestic_work_empath = domestic_work_empath
        self.art_empath = art_empath
        self.pet_empath = pet_empath
        self.air_travel_empath = air_travel_empath
        self.dance_empath = dance_empath
        self.healing_empath = healing_empath
        self.smell_empath = smell_empath
        self.sympathy_empath = sympathy_empath
        self.anger_empath = anger_empath
        self.neglect_empath = neglect_empath
        self.farming_empath = farming_empath
        self.clothing_empath = clothing_empath
        self.wedding_empath = wedding_empath
        self.envy_empath = envy_empath
        self.speaking_empath = speaking_empath
        self.fight_empath = fight_empath
        self.payment_empath = payment_empath
        self.toy_empath = toy_empath
        self.giving_empath = giving_empath
        self.alcohol_empath = alcohol_empath
        self.affection_empath = affection_empath
        self.friends_empath = friends_empath
        self.legend_empath = legend_empath
        self.suffering_empath = suffering_empath
        self.programming_empath = programming_empath
        self.military_empath = military_empath
        self.party_empath = party_empath
        self.beauty_empath = beauty_empath
        self.white_collar_job_empath = white_collar_job_empath
        self.animal_empath = animal_empath
        self.philosophy_empath = philosophy_empath
        self.meeting_empath = meeting_empath
        self.aggression_empath = aggression_empath
        self.fabric_empath = fabric_empath
        self.terrorism_empath = terrorism_empath
        self.swimming_empath = swimming_empath
        self.shame_empath = shame_empath
        self.confusion_empath = confusion_empath
        self.contentment_empath = contentment_empath
        self.night_empath = night_empath
        self.ridicule_empath = ridicule_empath
        self.nervousness_empath = nervousness_empath
        self.health_empath = health_empath
        self.economics_empath = economics_empath
        self.zest_empath = zest_empath
        self.order_empath = order_empath
        self.medical_emergency_empath = medical_emergency_empath
        self.feminine_empath = feminine_empath
        self.sports_empath = sports_empath
        self.car_empath = car_empath
        self.sexual_empath = sexual_empath
        self.masculine_empath = masculine_empath
        self.youth_empath = youth_empath
        self.trust_empath = trust_empath
        self.achievement_empath = achievement_empath
        self.medieval_empath = medieval_empath
        self.journalism_empath = journalism_empath
        self.cleaning_empath = cleaning_empath
        self.leisure_empath = leisure_empath
        
def parseLine(line):
    p = list(map(lambda s: s.strip().replace("\"", ""), line.split(",")))
    try:
        return UserData(int(p[0]), str(p[1]), p[2] == 'True', p[3] == 'True', int(p[4]), int(p[5]), \
            int(p[6]), int(p[7]), int(p[8]), float(p[9]), float(p[10]), float(p[11]), float(p[12]), \
            float(p[13]), float(p[14]), float(p[15]), float(p[16]), float(p[17]), float(p[18]), float(p[19]), \
            float(p[20]), float(p[21]), float(p[22]), float(p[23]), float(p[24]), float(p[25]), float(p[26]), \
            float(p[27]), float(p[28]), float(p[29]), float(p[30]), float(p[31]), float(p[32]), float(p[33]), \
            float(p[34]), float(p[35]), float(p[36]), float(p[37]), float(p[38]), float(p[39]), float(p[40]), \
            float(p[41]), float(p[42]), float(p[43]), float(p[44]), float(p[45]), float(p[46]), float(p[47]), \
            float(p[48]), float(p[49]), float(p[50]), float(p[51]), float(p[52]), float(p[53]), float(p[54]), \
            float(p[55]), float(p[56]), float(p[57]), float(p[58]), float(p[59]), float(p[60]), float(p[61]), \
            float(p[62]), float(p[63]), float(p[64]), float(p[65]), float(p[66]), float(p[67]), float(p[68]), \
            float(p[69]), float(p[70]), float(p[71]), float(p[72]), float(p[73]), float(p[74]), float(p[75]), \
            float(p[76]), float(p[77]), float(p[78]), float(p[79]), float(p[80]), float(p[81]), float(p[82]), \
            float(p[83]), float(p[84]), float(p[85]), float(p[86]), float(p[87]), float(p[88]), float(p[89]), \
            float(p[90]), float(p[91]), float(p[92]), float(p[93]), float(p[94]), float(p[95]), float(p[96]), \
            float(p[97]), float(p[98]), float(p[99]))
    except:
        return None #drop entries where float(x) returns an error (i.e. blank spaces)

"""TwitterHate.py"""

from pyspark import SparkContext, SparkConf
from pyspark.sql.functions import *
from pyspark.sql import SparkSession
import UserData

#skip first line of csv
def skip1AtIndex0(idx, iter):
    if idx == 0:
        next(iter)
    return iter

print('Initializing Spark context... ')
conf = SparkConf().setAppName("Twitter Hate Analysis").setMaster("local[*]")
sc = SparkContext(conf=conf)
print('Done.')

sc.setLogLevel("WARN")

print('Reading CSV file... ')
csvFileLines = sc.textFile("users_neighborhood_anon.csv", 2).mapPartitionsWithIndex(skip1AtIndex0)
print('Parsing and dropping erroneous entries... ')
data = csvFileLines.map(UserData.parseLine).filter(lambda x: x is not None).cache() #drop erroneous/empty entries
print('Done.')

print('Filtering by users in the neighbordhood of hate...')
n = float(data.count())
hate_neighborhood = data.filter(lambda x: x.hate_neigh) #filter to entries where hate_neigh = true
hate_neighborhood.persist() #keeps in memory, speeds up runtime
print('Done.')

print("User percentage in the neighborhood of hate: " + str(hate_neighborhood.count() / n))
print("Total tweets within hate neighborhood: " + str(hate_neighborhood.map(lambda x: x.statuses_count).reduce(lambda x, y: x + y))) #map all columns to status count, then sum
print("Hate neighborhood percentage that tweet about violence: " + str(hate_neighborhood.filter(lambda x: x.violence_empath > 0.0).count() / float(hate_neighborhood.count()))) #get % where violence empath tweets > 0
print("Hate neighborhood percentage that tweet about college: " + str(hate_neighborhood.filter(lambda x: x.college_empath > 0.0).count() / float(hate_neighborhood.count()))) #and so on
print("Hate neighborhood percentage that tweet about swearing terms: " + str(hate_neighborhood.filter(lambda x: x.swearing_terms_empath > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about office: " + str(hate_neighborhood.filter(lambda x: x.office_empath > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about computer: " + str(hate_neighborhood.filter(lambda x: x.computer_empath  > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about air travel: " + str(hate_neighborhood.filter(lambda x: x.air_travel_empath > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about anger: " + str(hate_neighborhood.filter(lambda x: x.anger_empath > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about aggression: " + str(hate_neighborhood.filter(lambda x: x.aggression_empath > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about programming: " + str(hate_neighborhood.filter(lambda x: x.programming_empath > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about fights: " + str(hate_neighborhood.filter(lambda x: x.fight_empath > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about alcohol: " + str(hate_neighborhood.filter(lambda x: x.alcohol_empath > 0.0).count() / float(hate_neighborhood.count())))
print("Hate neighborhood percentage that tweet about white collar job: " + str(hate_neighborhood.filter(lambda x: x.white_collar_job_empath > 0.0).count() / float(hate_neighborhood.count())))

def printUser(x):
  print("id: " + str(x.user_id) + "; followers: " + str(x.followers_count) + "; followees: " + str(x.followees_count) + "; statuses: " + str(x.statuses_count))

print('Sorting by followers count...')
map(printUser, hate_neighborhood.sortBy(lambda x: x.followers_count, ascending = False).take(10))

print('Sorting by followees count...')
map(printUser, hate_neighborhood.sortBy(lambda x: x.followees_count, ascending = False).take(10))

print('Sorting by statuses count...')
map(printUser, hate_neighborhood.sortBy(lambda x: x.statuses_count, ascending = False).take(10))

print('Sorting by followees and statuses count (ascending)...')
map(printUser, hate_neighborhood.sortBy(lambda x: (x.followees_count, x.statuses_count), ascending = [True, True]).take(10))

print('Converting RDD to DF...')
spark = SparkSession(sc)
hasattr(hate_neighborhood, "toDF")
df = hate_neighborhood.toDF()
df.persist()
print('Done.')

print("Correlation value between follower count and swearing: " + str(df.stat.corr("followers_count", "swearing_terms_empath"))) #get correlation values between followers_count and swearing_terms
print("Correlation value between followee count and swearing: " + str(df.stat.corr("followees_count", "swearing_terms_empath"))) #and so on
print("Correlation value between status count and swearing: " + str(df.stat.corr("statuses_count", "swearing_terms_empath")))
#decent tutorial for spark programming: https://spark.apache.org/docs/latest/rdd-programming-guide.html

sc.stop()

"""**List of all columns, as accessible in data:**
user_id (int)
hate (string) 
hate_neigh (bool)
normal_neigh (bool)
statuses_count (int)
followers_count (int)
followees_count (int)
favorites_count (int)
listed_count (int)
betweenness (rest are float)
eigenvector
in_degree
out_degree
negotiate_empath
vehicle_empath
science_empath
timidity_empath
gain_empath
swearing_terms_empath
office_empath
tourism_empath
computer_empath
violence_empath
horror_empath
dispute_empath
sadness_empath
internet_empath
college_empath
attractive_empath
plant_empath
technology_empath
reading_empath
deception_empath
ancient_empath
ship_empath
messaging_empath
surprise_empath
occupation_empath
hearing_empath
furniture_empath
restaurant_empath
domestic_work_empath
art_empath
pet_empath
air_travel_empath
dance_empath
healing_empath
smell_empath
sympathy_empath
anger_empath
neglect_empath
farming_empath
clothing_empath
wedding_empath
envy_empath
speaking_empath
fight_empath
payment_empath
toy_empath
giving_empath
alcohol_empath
affection_empath
friends_empath
legend_empath
suffering_empath
programming_empath
military_empath
party_empath
beauty_empath
white_collar_job_empath
animal_empath
philosophy_empath
meeting_empath
aggression_empath
fabric_empath
terrorism_empath
swimming_empath
shame_empath
confusion_empath
contentment_empath
night_empath
ridicule_empath
nervousness_empath
health_empath
economics_empath
zest_empath
order_empath
medical_emergency_empath
feminine_empath
sports_empath
car_empath
sexual_empath
masculine_empath
youth_empath
trust_empath
achievement_empath
medieval_empath
journalism_empath
cleaning_empath
leisure_empath
"""